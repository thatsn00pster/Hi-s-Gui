local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- SETTINGS
local jumpPower = 80       -- high jump strength
local jumpCooldown = 1.0   -- cooldown in seconds

-- state
local highJumpEnabled = false
local cooldown = 0
local activePart, bv, followConnection

-- update references on respawn
player.CharacterAdded:Connect(function(char)
	character = char
	humanoid = char:WaitForChild("Humanoid")
end)

-- GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HighJumpToggleGUI"
screenGui.Parent = playerGui

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 280, 0, 50)
button.Position = UDim2.new(0.5, -140, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 20
button.Text = "High Jump: OFF"
button.Parent = screenGui

local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(0, 280, 0, 30)
statusLabel.Position = UDim2.new(0.5, -140, 0, 75)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 18
statusLabel.Text = "Cooldown: 0.0s ðŸŸ¢"
statusLabel.Parent = screenGui

button.MouseButton1Click:Connect(function()
	highJumpEnabled = not highJumpEnabled
	if highJumpEnabled then
		button.Text = "High Jump: ON"
		button.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
	else
		button.Text = "High Jump: OFF"
		button.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
	end
end)

-- custom high jump
local function partJump()
	if not character or not humanoid then return end
	if activePart then return end
	if cooldown > 0 then return end -- still cooling down

	local state = humanoid:GetState()
	if state ~= Enum.HumanoidStateType.Running and state ~= Enum.HumanoidStateType.Landed then
		return
	end

	local root = character:FindFirstChild("HumanoidRootPart")
	if not root then return end

	-- spawn part
	activePart = Instance.new("Part")
	activePart.Size = Vector3.new(6, 1, 6)
	activePart.Anchored = true
	activePart.CanCollide = true
	activePart.Transparency = 1
	activePart.Name = "JumpPad"
	activePart.Parent = workspace

	-- upward force
	bv = Instance.new("BodyVelocity")
	bv.Velocity = Vector3.new(0, jumpPower, 0)
	bv.MaxForce = Vector3.new(0, 1e5, 0)
	bv.Parent = root

	-- keep under player
	followConnection = RunService.Heartbeat:Connect(function()
		if activePart and root then
			activePart.CFrame = root.CFrame * CFrame.new(0, -3, 0)
		end
	end)

	-- cleanup
	task.delay(0.3, function()
		if followConnection then
			followConnection:Disconnect()
			followConnection = nil
		end
		if bv then
			bv:Destroy()
			bv = nil
		end
		if activePart then
			activePart:Destroy()
			activePart = nil
		end
	end)

	-- set cooldown
	cooldown = jumpCooldown
end

-- input handling (ONLY triggers on press, no auto jump)
UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.Space then
		if highJumpEnabled and cooldown <= 0 then
			partJump()
		end
	end
end)

-- cooldown + gui updater
RunService.Heartbeat:Connect(function(dt)
	if cooldown > 0 then
		cooldown = math.max(0, cooldown - dt)
	end

	if highJumpEnabled then
		if cooldown > 0 then
			statusLabel.Text = string.format("Cooldown: %.1fs ðŸ”´", cooldown)
			statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
		else
			statusLabel.Text = "Cooldown: 0.0s ðŸŸ¢"
			statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
		end
	else
		statusLabel.Text = "Cooldown: Disabled"
		statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
	end
end)
